// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4hP6nTqWZ38SWvbrCq9fFS
// Component: 7meOWJs-fr2F

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: u5k9gpYL7hvi/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsipt9Py8JurHq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ipt9py8JURHq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4hP6nTqWZ38SWvbrCq9fFS/projectcss
import sty from "./PlasmicThread.module.css"; // plasmic-import: 7meOWJs-fr2F/css

createPlasmicElementProxy;

export type PlasmicThread__VariantMembers = {};
export type PlasmicThread__VariantsArgs = {};
type VariantPropType = keyof PlasmicThread__VariantsArgs;
export const PlasmicThread__VariantProps = new Array<VariantPropType>();

export type PlasmicThread__ArgsType = {};
type ArgPropType = keyof PlasmicThread__ArgsType;
export const PlasmicThread__ArgProps = new Array<ArgPropType>();

export type PlasmicThread__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  h1?: Flex__<"h1">;
  h4?: Flex__<"h4">;
  form3?: Flex__<typeof FormWrapper>;
  textArea3?: Flex__<typeof AntdTextArea>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultThreadProps {
  className?: string;
}

const $$ = {};

function PlasmicThread__RenderFunc(props: {
  variants: PlasmicThread__VariantsArgs;
  args: PlasmicThread__ArgsType;
  overrides: PlasmicThread__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "textArea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    thread: usePlasmicDataOp(() => {
      return {
        sourceId: "msPJThy8kgSaraQnjyXF2t",
        opId: "66c6d50a-4c00-4f9f-8949-fa4c08d7ad26",
        userArgs: {
          query: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.66c6d50a-4c00-4f9f-8949-fa4c08d7ad26.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    posts: usePlasmicDataOp(() => {
      return {
        sourceId: "msPJThy8kgSaraQnjyXF2t",
        opId: "f3a56726-ae62-41ca-b615-4444adade085",
        userArgs: {
          query: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.f3a56726-ae62-41ca-b615-4444adade085.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsipt9Py8JurHq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__pUhHk)}>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.thread.data[0].title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Thread";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h1>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.posts.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__q2QmE
                        )}
                        key={currentIndex}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eLlZk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5Pj7Q
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zjDij
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ahPh1
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.created_by.split(
                                        "@"
                                      )[0];
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Title";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__d90Yi
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return new Date(
                                        currentItem.created_at
                                      ).toLocaleString();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Time";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bBpXy
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.body;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Body";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      </Stack__>
                    );
                  })}
                  {(() => {
                    try {
                      return (currentUser?.roleIds ?? []).includes(
                        "211523eb-67b5-4df9-9e02-a2e1e4674c01"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__oa5Kq)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ppic
                        )}
                      >
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          {"Reply"}
                        </h4>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.form3),
                            extendedOnValuesChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["form3", "value"],
                                FormWrapper_Helpers
                              ),
                            formItems: [
                              {
                                label: "Name",
                                name: "name",
                                inputType: "Text"
                              },
                              {
                                label: "Message",
                                name: "message",
                                inputType: "Text Area"
                              }
                            ],
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: undefined,
                            onFinish: async values => {
                              const $steps = {};

                              $steps["postgresCreate"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "msPJThy8kgSaraQnjyXF2t",
                                        opId: "1701b840-0612-4600-a4e3-50e512def7b8",
                                        userArgs: {
                                          variables: [
                                            $state.form3.value.message,
                                            $ctx.params.id
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId:
                                          "211523eb-67b5-4df9-9e02-a2e1e4674c01"
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresCreate"] != null &&
                                typeof $steps["postgresCreate"] === "object" &&
                                typeof $steps["postgresCreate"].then ===
                                  "function"
                              ) {
                                $steps["postgresCreate"] = await $steps[
                                  "postgresCreate"
                                ];
                              }

                              $steps["goToThread"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/thread/${(() => {
                                        try {
                                          return $ctx.params.id;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        location.assign(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToThread"] != null &&
                                typeof $steps["goToThread"] === "object" &&
                                typeof $steps["goToThread"].then === "function"
                              ) {
                                $steps["goToThread"] = await $steps[
                                  "goToThread"
                                ];
                              }
                            },
                            onIsSubmittingChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["form3", "isSubmitting"],
                                FormWrapper_Helpers
                              ),
                            ref: ref => {
                              $refs["form3"] = ref;
                            },
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "form3.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "form3.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"form3"}
                              data-plasmic-override={overrides.form3}
                              {...child$Props}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__izCaM
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___1TZvx
                                    )}
                                  >
                                    {"Body"}
                                  </div>
                                }
                                name={"message"}
                                noLabel={true}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textArea3
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["textArea3", "value"],
                                        AntdTextArea_Helpers
                                      ),
                                    value: generateStateValueProp($state, [
                                      "textArea3",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "textArea3.value"
                                      }
                                    ],
                                    [],
                                    AntdTextArea_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdTextArea
                                      data-plasmic-name={"textArea3"}
                                      data-plasmic-override={
                                        overrides.textArea3
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__czIp8
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dh3Wf
                                    )}
                                  >
                                    {"Label"}
                                  </div>
                                }
                                noLabel={true}
                              >
                                <AntdButton
                                  data-plasmic-name={"button"}
                                  data-plasmic-override={overrides.button}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button
                                  )}
                                  submitsForm={true}
                                  type={"primary"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uglOu
                                    )}
                                  >
                                    {"Submit"}
                                  </div>
                                </AntdButton>
                              </FormItemWrapper>
                            </FormWrapper>
                          );
                        })()}
                      </Stack__>
                    </Stack__>
                  ) : null}
                </div>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "h1", "h4", "form3", "textArea3", "button"],
  pageLayout: ["pageLayout", "h1", "h4", "form3", "textArea3", "button"],
  h1: ["h1"],
  h4: ["h4"],
  form3: ["form3", "textArea3", "button"],
  textArea3: ["textArea3"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  h1: "h1";
  h4: "h4";
  form3: typeof FormWrapper;
  textArea3: typeof AntdTextArea;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicThread__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicThread__VariantsArgs;
    args?: PlasmicThread__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicThread__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicThread__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicThread__ArgProps,
          internalVariantPropNames: PlasmicThread__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicThread__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicThread";
  } else {
    func.displayName = `PlasmicThread.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"4hP6nTqWZ38SWvbrCq9fFS"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "4hP6nTqWZ38SWvbrCq9fFS"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicThread = Object.assign(
  // Top-level PlasmicThread renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    form3: makeNodeComponent("form3"),
    textArea3: makeNodeComponent("textArea3"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicThread
    internalVariantProps: PlasmicThread__VariantProps,
    internalArgProps: PlasmicThread__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Thread - Community Forum",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicThread;
/* prettier-ignore-end */
