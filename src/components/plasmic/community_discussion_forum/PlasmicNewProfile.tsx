// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4hP6nTqWZ38SWvbrCq9fFS
// Component: iRBw2f4kNUDV

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: u5k9gpYL7hvi/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsipt9Py8JurHq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ipt9py8JURHq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4hP6nTqWZ38SWvbrCq9fFS/projectcss
import sty from "./PlasmicNewProfile.module.css"; // plasmic-import: iRBw2f4kNUDV/css

import image6UPxKEno1BR7 from "./images/image6.svg"; // plasmic-import: uPxKEno1b_r7/picture

createPlasmicElementProxy;

export type PlasmicNewProfile__VariantMembers = {};
export type PlasmicNewProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewProfile__VariantsArgs;
export const PlasmicNewProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicNewProfile__ArgsType = {};
type ArgPropType = keyof PlasmicNewProfile__ArgsType;
export const PlasmicNewProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicNewProfile__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  img?: Flex__<typeof PlasmicImg__>;
  h1?: Flex__<"h1">;
  profileForm?: Flex__<typeof FormWrapper>;
  columns?: Flex__<"div">;
  firstName?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  textArea2?: Flex__<typeof AntdTextArea>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultNewProfileProps {
  className?: string;
}

const $$ = {};

function PlasmicNewProfile__RenderFunc(props: {
  variants: PlasmicNewProfile__VariantsArgs;
  args: PlasmicNewProfile__ArgsType;
  overrides: PlasmicNewProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "id",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profileForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profileForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "tmpemail",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profileForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "profileForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    categories: usePlasmicDataOp(() => {
      return {
        sourceId: "msPJThy8kgSaraQnjyXF2t",
        opId: "82225a4b-f0f3-4728-a79d-c6a56c44a264",
        userArgs: {},
        cacheKey: `plasmic.$.82225a4b-f0f3-4728-a79d-c6a56c44a264.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsipt9Py8JurHq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__eyRc5)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bKarQ)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"32%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"32px"}
                      loading={"lazy"}
                      src={{
                        src: image6UPxKEno1BR7,
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />

                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"New Profile"}
                    </h1>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gPqRj)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Zccg
                      )}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.profileForm
                          ),
                          extendedOnValuesChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["profileForm", "value"],
                              FormWrapper_Helpers
                            ),
                          formItems: [
                            { label: "Name", name: "name", inputType: "Text" },
                            {
                              label: "Message",
                              name: "message",
                              inputType: "Text Area"
                            }
                          ],
                          initialValues: (() => {
                            try {
                              return {
                                created_by: currentUser.email
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: undefined,
                          onFinish: async values => {
                            const $steps = {};

                            $steps["updateId"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["id"]
                                    },
                                    operation: 0,
                                    value: globalThis.crypto?.randomUUID()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateId"] != null &&
                              typeof $steps["updateId"] === "object" &&
                              typeof $steps["updateId"].then === "function"
                            ) {
                              $steps["updateId"] = await $steps["updateId"];
                            }

                            $steps["updateTmpemail"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["tmpemail"]
                                    },
                                    operation: 0,
                                    value: currentUser.email
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateTmpemail"] != null &&
                              typeof $steps["updateTmpemail"] === "object" &&
                              typeof $steps["updateTmpemail"].then ===
                                "function"
                            ) {
                              $steps["updateTmpemail"] = await $steps[
                                "updateTmpemail"
                              ];
                            }

                            $steps["profileCreate"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "tZEJhk5J5Wn3AtbXAGTNNZ",
                                      opId: "c034ea79-d0cf-4a7b-9d50-556d71a435d4",
                                      userArgs: {
                                        variables: [
                                          $state.profileForm.value.bio,
                                          $state.profileForm.value.email,
                                          $state.profileForm.value.first_name,
                                          $state.profileForm.value.last_name,
                                          $state.profileForm.value.phone
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["profileCreate"] != null &&
                              typeof $steps["profileCreate"] === "object" &&
                              typeof $steps["profileCreate"].then === "function"
                            ) {
                              $steps["profileCreate"] = await $steps[
                                "profileCreate"
                              ];
                            }

                            $steps["goToHome"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/profile/${(() => {
                                      try {
                                        return $state.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      location.assign(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToHome"] != null &&
                              typeof $steps["goToHome"] === "object" &&
                              typeof $steps["goToHome"].then === "function"
                            ) {
                              $steps["goToHome"] = await $steps["goToHome"];
                            }

                            $steps["updateIdToStateVar"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["id"]
                                    },
                                    operation: 0
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateIdToStateVar"] != null &&
                              typeof $steps["updateIdToStateVar"] ===
                                "object" &&
                              typeof $steps["updateIdToStateVar"].then ===
                                "function"
                            ) {
                              $steps["updateIdToStateVar"] = await $steps[
                                "updateIdToStateVar"
                              ];
                            }
                          },
                          onIsSubmittingChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["profileForm", "isSubmitting"],
                              FormWrapper_Helpers
                            ),
                          ref: ref => {
                            $refs["profileForm"] = ref;
                          },
                          requiredMark: "optional",
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "profileForm.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "profileForm.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"profileForm"}
                            data-plasmic-override={overrides.profileForm}
                            {...child$Props}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"columns"}
                              data-plasmic-override={overrides.columns}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.columns
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__yFhNb
                                )}
                              >
                                <FormItemWrapper
                                  data-plasmic-name={"firstName"}
                                  data-plasmic-override={overrides.firstName}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.firstName
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__m4VcR
                                      )}
                                    >
                                      {"First Name"}
                                    </div>
                                  }
                                  name={"first_name"}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input2
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input2", "value"],
                                          AntdInput_Helpers
                                        ),
                                      value: generateStateValueProp($state, [
                                        "input2",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input2.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input2"}
                                        data-plasmic-override={overrides.input2}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__pscRg
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__y0E7M
                                      )}
                                    >
                                      {"Email"}
                                    </div>
                                  }
                                  name={"email"}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input4
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input4", "value"],
                                          AntdInput_Helpers
                                        ),
                                      value: generateStateValueProp($state, [
                                        "input4",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input4.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input4"}
                                        data-plasmic-override={overrides.input4}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column___0SkTh
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___1AsaW
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__nEFbo
                                      )}
                                    >
                                      {"Last Name"}
                                    </div>
                                  }
                                  name={"last_name"}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input3
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input3", "value"],
                                          AntdInput_Helpers
                                        ),
                                      value: generateStateValueProp($state, [
                                        "input3",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input3.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input3"}
                                        data-plasmic-override={overrides.input3}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__nodaO
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__lhJi7
                                      )}
                                    >
                                      {"Phone"}
                                    </div>
                                  }
                                  name={"phone"}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input5
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input5", "value"],
                                          AntdInput_Helpers
                                        ),
                                      value: generateStateValueProp($state, [
                                        "input5",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input5.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input5"}
                                        data-plasmic-override={overrides.input5}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                              </div>
                            </Stack__>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__hbjdV
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tuHtt
                                  )}
                                >
                                  {"Bio / A little about you"}
                                </div>
                              }
                              name={"bio"}
                              rules={[{ ruleType: "required" }]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.textArea2
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["textArea2", "value"],
                                      AntdTextArea_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "textArea2",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "textArea2.value"
                                    }
                                  ],
                                  [],
                                  AntdTextArea_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdTextArea
                                    data-plasmic-name={"textArea2"}
                                    data-plasmic-override={overrides.textArea2}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__kpbP
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nNao
                                  )}
                                >
                                  {"Label"}
                                </div>
                              }
                              noLabel={true}
                            >
                              <AntdButton
                                data-plasmic-name={"button"}
                                data-plasmic-override={overrides.button}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button
                                )}
                                onClick={async () => {
                                  const $steps = {};
                                }}
                                submitsForm={true}
                                type={"primary"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__u8OEf
                                  )}
                                >
                                  {"Post"}
                                </div>
                              </AntdButton>
                            </FormItemWrapper>
                          </FormWrapper>
                        );
                      })()}
                    </Stack__>
                  </Stack__>
                </div>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "img",
    "h1",
    "profileForm",
    "columns",
    "firstName",
    "input2",
    "input4",
    "input3",
    "input5",
    "textArea2",
    "button"
  ],
  pageLayout: [
    "pageLayout",
    "img",
    "h1",
    "profileForm",
    "columns",
    "firstName",
    "input2",
    "input4",
    "input3",
    "input5",
    "textArea2",
    "button"
  ],
  img: ["img"],
  h1: ["h1"],
  profileForm: [
    "profileForm",
    "columns",
    "firstName",
    "input2",
    "input4",
    "input3",
    "input5",
    "textArea2",
    "button"
  ],
  columns: ["columns", "firstName", "input2", "input4", "input3", "input5"],
  firstName: ["firstName", "input2"],
  input2: ["input2"],
  input4: ["input4"],
  input3: ["input3"],
  input5: ["input5"],
  textArea2: ["textArea2"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  img: typeof PlasmicImg__;
  h1: "h1";
  profileForm: typeof FormWrapper;
  columns: "div";
  firstName: typeof FormItemWrapper;
  input2: typeof AntdInput;
  input4: typeof AntdInput;
  input3: typeof AntdInput;
  input5: typeof AntdInput;
  textArea2: typeof AntdTextArea;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewProfile__VariantsArgs;
    args?: PlasmicNewProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewProfile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewProfile__ArgProps,
          internalVariantPropNames: PlasmicNewProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewProfile";
  } else {
    func.displayName = `PlasmicNewProfile.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"211523eb-67b5-4df9-9e02-a2e1e4674c01"}
      appId={"4hP6nTqWZ38SWvbrCq9fFS"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "4hP6nTqWZ38SWvbrCq9fFS"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewProfile = Object.assign(
  // Top-level PlasmicNewProfile renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    profileForm: makeNodeComponent("profileForm"),
    columns: makeNodeComponent("columns"),
    firstName: makeNodeComponent("firstName"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    input3: makeNodeComponent("input3"),
    input5: makeNodeComponent("input5"),
    textArea2: makeNodeComponent("textArea2"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNewProfile
    internalVariantProps: PlasmicNewProfile__VariantProps,
    internalArgProps: PlasmicNewProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "New Profile - Community Forum",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewProfile;
/* prettier-ignore-end */
